{"version":3,"file":"clogy.js","sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 2b159bf820cddf45538a","webpack:///src/constants/globalConstants.js","webpack:///src/index.js","webpack:///src/utilities/globalUtilities.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"clogy\"] = factory();\n\telse\n\t\troot[\"clogy\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 2b159bf820cddf45538a\n **/","export default {\n  get loggingLevels() {\n    return {\n      types: {\n        log: 1,\n        trace: 2,\n        debug: 3,\n        info: 4,\n        warn: 5,\n        error: 6,\n        none: 7\n      },\n      get range() {\n        return {\n          min: this.types.log,\n          max: this.types.none\n        };\n      }\n    };\n  },\n  options: {\n    showDateTime: false,\n    prefix: ''\n  },\n  methods: ['log', 'trace', 'debug', 'info', 'warn', 'error']\n};\n\n\n\n/** WEBPACK FOOTER **\n ** src/constants/globalConstants.js\n **/","import GLOBAL_CONSTANTS from './constants/globalConstants';\nimport GLOBAL_UTILITIES from './utilities/globalUtilities';\n\n////////////////////////////////////////////////////////////////////////////////\nclass Loggers {}\n\nGLOBAL_CONSTANTS.methods.forEach((method) => {\n\n  // Not using arrow functions because 'this' will be undefined\n  // (Arrow functions capture the this value of the enclosing context)\n  Loggers.prototype[method] = function(...args) {\n    const logToConsoleParams = {\n      currentLogLevel: this.getLevel(),\n      loggingType: method,\n      options: this.options\n    };\n\n    GLOBAL_UTILITIES.logToConsole(logToConsoleParams, args);\n  };\n});\n////////////////////////////////////////////////////////////////////////////////\n\nclass Clogy extends Loggers {\n  constructor() {\n    super();\n\n    this._level = null;\n    this.options = {};\n\n    this._init();\n  }\n\n  _init() {\n\n    // Set default log level\n    this.setLevel(GLOBAL_CONSTANTS.loggingLevels.types.info);\n\n    ({\n      showDateTime: this.options.showDateTime,\n      prefix: this.options.prefix\n    } = GLOBAL_CONSTANTS.options);\n  }\n\n  getLevel() {\n    return this._level;\n  }\n\n  setLevel(logLevel) {\n    let _logLevel = logLevel;\n\n    // No need of ===, typeof returns a string\n    if (typeof(_logLevel) == 'string') {\n      _logLevel = GLOBAL_CONSTANTS.loggingLevels.types[_logLevel.toLowerCase()];\n    }\n\n    // No need to check if log level is less or more than min and max or invalid\n    // Will be handled when logging\n    this._level = _logLevel;\n  }\n\n  get LEVELS() {\n    return GLOBAL_CONSTANTS.loggingLevels.types;\n  }\n\n  enableAllLevels() {\n    this.setLevel(GLOBAL_CONSTANTS.loggingLevels.types.log);\n  }\n\n  disableAllLevels() {\n    this.setLevel(GLOBAL_CONSTANTS.loggingLevels.types.none);\n  }\n\n  decorator(decoFunc) {\n\n    // No need of ===, typeof returns a string\n    if (typeof(decoFunc) != 'function') {\n      throw new TypeError('Decorator handler should be a function');\n    }\n\n    decoFunc(GLOBAL_UTILITIES.singelton.getInstance(this));\n  }\n}\n\nconst clogy = new Clogy();\n\n////////////////////////////////////////////////////////////////////////////////\n/* clogy Methods only*/\n\n// Not using arrow functions because 'this' will be undefined\n// (Arrow functions capture the this value of the enclosing context)\nclogy.noConflict = function() {\n\n  // No need of ===, typeof returns a string\n  if (typeof(window) != 'undefined' && window.clogy) {\n\n    // it will be deleted because clogy is not a variable, but\n    // a property of the global object i.e. window;\n    // check yourself ('clogy' in window) -> false after deletion\n    delete window.clogy;\n  }\n\n  return this;\n};\n////////////////////////////////////////////////////////////////////////////////\n\nexport default clogy;\n\n// Because of Babel@6\n// Can use plugin: https://www.npmjs.com/package/babel-plugin-add-module-exports\n// Used this soln. instead:\n// http://stackoverflow.com/questions/34736771/webpack-umd-library-return-object-default/34778391#34778391\nmodule.exports = clogy;\n\n\n\n/** WEBPACK FOOTER **\n ** src/index.js\n **/","import GLOBAL_CONSTANTS from '../constants/globalConstants';\n\nconst singelton = (() => {\n  let instance;\n\n  function createInstance(originalInstance) {\n    return Object.getPrototypeOf(Object.getPrototypeOf(originalInstance));\n  }\n\n  return {\n    getInstance: (originalInstance) => {\n      if (!instance) {\n        instance = createInstance(originalInstance);\n      }\n      return instance;\n    }\n  };\n})();\n\nconst logToConsole = (() => {\n  const DEFAULT_LOGGING_TYPE = 'log';\n\n  function isLogLevelValid(currentLogLevel) {\n    return !!(\n      currentLogLevel &&\n      currentLogLevel >= GLOBAL_CONSTANTS.loggingLevels.range.min &&\n      currentLogLevel <= GLOBAL_CONSTANTS.loggingLevels.range.max\n    );\n  }\n\n  function isNoneLogLevel(currentLogLevel) {\n    return currentLogLevel === GLOBAL_CONSTANTS.loggingLevels.types.none;\n  }\n\n  function isLoggingAllowed(currentLogLevel, loggingType) {\n    return (\n      GLOBAL_CONSTANTS.loggingLevels.types[loggingType] >= currentLogLevel\n    );\n  }\n\n  function isConsoleDefined() {\n\n    // No need of ===, typeof returns a string\n    return typeof(console) != 'undefined';\n  }\n\n  function getDateTime() {\n    const d = new Date();\n    const date = d.toDateString();\n\n    // 0 means first matched string, which will be true always unless someone\n    // overrides the result\n    const time = d.toTimeString().match(/^([0-9]{2}:[0-9]{2}:[0-9]{2})/)[0];\n\n    // NOTE: hey..!! see, 3 is not a magic number, if you think it is, then\n    // it's just milliseconds in 3 digits (000-999)\n    const appendMilliseconds = `00${d.getMilliseconds()}`.slice(-3);\n\n    return `${date} ${time}.${appendMilliseconds}`;\n  }\n\n  function justLogItDude(loggingType, args) {\n    const consoleLoggingType = console[loggingType] || console[DEFAULT_LOGGING_TYPE];\n    Function.prototype.bind.call(consoleLoggingType, console).apply(console, args);\n  }\n\n  // Function style programming;\n  // No mutating params, no state known beforehand\n  return (logToConsoleParams, args) => {\n    const { currentLogLevel, loggingType, options = {} } = logToConsoleParams;\n\n    if (!isLogLevelValid(currentLogLevel)) {\n      throw new RangeError('Invalid LogLevel set, Please set a valid LogLevel');\n    }\n\n    if (\n      isNoneLogLevel(currentLogLevel) ||\n      !isConsoleDefined() ||\n      !isLoggingAllowed(currentLogLevel, loggingType)) {\n      return;\n    }\n\n    /////////////////////////////////////////////\n    const consoleOptions = [];\n\n    if (options.showDateTime) {\n\n      // Better readability than consoleOptions[consoleOptions.length] = value\n      consoleOptions.push(`${getDateTime()}:`);\n    }\n\n    if (options.prefix) {\n      consoleOptions.push(options.prefix);\n    }\n\n    justLogItDude(loggingType, [...consoleOptions, ...args]);\n  };\n})();\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport default { singelton, logToConsole };\n\n\n\n/** WEBPACK FOOTER **\n ** src/utilities/globalUtilities.js\n **/"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AAFA;AAIA;AAfA;AAiBA;AACA;AACA;AACA;AAFA;AAIA;AAxBA;;;;;;;;;;;;;;ACAA;AACA;;;AAAA;AACA;;;;;;;;;;;;;AAEA;;;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AAHA;AACA;AAFA;AAAA;AAAA;AACA;AAMA;AACA;AACA;;;AAGA;;;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AANA;AAOA;AACA;;;AACA;AACA;;AAEA;AACA;AAJA;AAMA;AACA;AAEA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;;AAMA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AApBA;AACA;AACA;;;;AAxCA;AACA;AA4DA;AACA;;;;;;AAMA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;;;;AAKA;;;;;;;;;;;;AC/GA;AACA;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;","sourceRoot":""}